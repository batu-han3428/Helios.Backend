trigger:
  branches:
    include:
      - main

pool:
  name: 'vmssagents-pool'



variables:
 
  # Azure Container Registry details
  acrName: 'medcase'
  registry: 'medcase.azurecr.io'
  tag: '$(Build.BuildId)'

  # Kubernetes details
  aksClusterName: 'medcase-cluster-dev'
  kubernetesNamespace: 'helios-testing'  # e.g., production
  azureServiceConnection: 'Medcase-Azure-Cli' 
  dockerRegistryServiceConnection: 'medcase'
steps:
- checkout: self  # This is the correct way to reference the checkout step

- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'

- script: |
    echo "Installing Azure CLI..."
    apt-get install -y azure-cli
    az --version
  displayName: 'Install Azure CLI'

- script: |
    whoami
    sudo usermod -aG docker AzDevOps
    groups
  displayName: 'Verify User and Group Membership'

- script: |
    echo "Listing files..."
    ls -R .
    if [ ! -f "./Helios.sln" ]; then
      echo "Project file not found!"
      exit 1
    fi
     if [ ! -f "./pipeline/build-docker.sh" ]; then
      echo "build-docker.sh file not found!"
      exit 1
    fi
  displayName: 'Verify project file exists'


- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      whoami
      az acr login --name $(acrName) --expose-token
      echo "Listing images in ACR..."
      az acr repository list --name $(acrName) --output table


- task: Docker@2
  inputs:
    containerRegistry: 'medcase'
    repository: '/helios/helios-core'
    command: 'buildAndPush'
    Dockerfile: './Helios.EDC/Helios.Core/Dockerfile'
    tags: |
      $(tag)

# - script: |
#     az acr login --name $(acrName) --expose-token
#     docker ps
#     chmod +x ./pipeline/build-docker.sh  # Make the script executable
#     ./pipeline/build-docker.sh 'medcase.azurecr.io/helios' 'helios-core' $(tag) './Helios.EDC/Helios.Core/Dockerfile'
#   displayName: '[Core Api] Build and Push Docker Image'



- task: Kubernetes@1
  displayName: 'Deploy to AKS'
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Medcase-Azure-Cli'
    azureResourceGroup: 'medcase-cluster'
    kubernetesCluster: '$(aksClusterName)'
    namespace: '$(kubernetesNamespace)'
    command: 'apply'
    useConfigurationFile: false
    arguments: |
      -f deploy/deployment-core.yaml
    secretType: 'None'